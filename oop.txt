############
constructor
############
A constructor that takes no parameters (or has parameters that all have default values) is called a default constructor. 
e.g. Student s; 
There is no such thing as: Student s();

If your class has no other constructors, C++ will automatically generate a public default constructor for you. This is sometimes 
called an implicit constructor (or implicitly generated constructor).

If your class has any other constructors, the implicitly generated constructor will not be provided.

If a constructor takes argument and each argument has a default value, then this constructor can be used as default 
constructor when no argument is given:

e.g. 
class Student 
{ 
	public: Student(string name="None", int age=20, char gender = ' ');
	
	private: 
		string name; 
		int age; 
		char gender; 
}; 

Student s; // default constructor 
or 
Student("John", 30, 'm'); // regular constructor


#################
polymorphism
#################

polymorphism is all about virtual function and use of pointer to the base class towards the derived class.
e.g.

class Person
{
  private:
	  string name;
	  int age;
	  char gender;

  public:
    
	  Person(string n="None", int num=30, char c=' ') {
		  name = n;
		  age = num;
		  gender = c;
		  cout << "Person Constructor" << endl;
	  }
    
	  virtual void showType() { cout << "Person showType:" << " name=" << name << " age=" << age << endl; }    
    
 };
 
 
class Student : public Person {
  private:
	  int id;
  public:
	  Student(int i) {
		  id = i;
	  }

	  Student(int i, string n, int m, char c) : Person(n, m, c)
	  {
		  id = i;
		  cout << "Student construcor" << endl;
	  }

	  Student() 
      {
		  id = -1;
		  cout << "default student constructor" << endl;
	  }

	  void showType() { cout << "Student showType: id=" << id <<  endl; }
	
};

int main()
{
    Person *p;
    Student s(12345, "Mike", 23, 'm');
    
    p=&s;
    p->showType();
}
 
The reuslt is:
Person Constructor
Student construcor
Student showType: id=12345

If we don't have "virtual" keyword in front of showType in the base class Person, the result is:
Person Constructor
Student construcor
Person showType: name=Mike age=23

We say the first case is "Polymorphism" because the base class pointer is used to point to the derived class and the method of 
the derived class showType is executed at run time.  We also call this "dynamic binding", or "run-time binding".


#############################
Multiple inherience problems
#############################
If the derived class does not have a function, but the two base classes have it, when calling this function on the
derived object, there will be a compiler error.
e.g

class Person
{
private:
	string name;
	int age;
	char gender;

public:
    
	Person(string n="None", int num=30, char c=' ') {
		name = n;
		age = num;
		gender = c;
		cout << "Person Constructor" << endl;
	}  
	virtual void showType() { cout << "Person showType:" << " name=" << name << " age=" << age << endl; }
};

class Info
{
private:
	string address;
public:
	Info() { cout << "default Info constructor" << endl; }
	Info(string s) { address = s;  cout << "Info constructor" << endl;  }
	void showType() { cout << "Info showType:" << endl; }
	void showAddress() { cout << "address:" << address << endl; }
};

class Student : public Person, public Info {
private:
	int id;
public:
	Student(int i) {
		id = i;
	}

	Student(int i, string n, int m, char c, string s) : Person(n, m, c), Info(s)
	{
		id = i;
		cout << "Student construcor" << endl;
	}

	Student() : Person(), Info()
    {
		id = -1;
		cout << "default student constructor" << endl;
	}

	//void showType() { cout << "Student showType: id=" << id <<  endl; }

};

int main()
{
    Student s(12345, "Mike", 23, 'm', "1025 Canyon Run");    
    s.showType();
}

Compiler error:
solution.cc: In function ‘int main()’:
solution.cc:82:7: error: request for member ‘showType’ is ambiguous
     s.showType();
       ^~~~~~~~
